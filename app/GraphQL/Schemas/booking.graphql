union Agent = Employer | Renter

"Booking model resource"
type Booking {
    id: ID!
    begin_at: DateTime!
    end_at: DateTime!
    status: Status! @belongsTo
    client: Client @belongsTo
    agent: Agent @morphTo
    place: Place! @belongsTo
    info: String
    created_at: DateTime!
    updated_at: DateTime!
}

extend type Query {
    bookings(
        orderBy: [BookingsOrderByClause!] @builder(method: "App\\Models\\Booking@orderBy")
    ): [Booking!]! @paginate(defaultCount: 10)

    booking(
        id: ID @eq
    ): Booking @find
}

input BookingsOrderByClause {
    field: BookingsColumns!
    order: SortOrder!
}

enum BookingsColumns {
    BEGIN_AT @enum(value: "begin_at")
    END_AT @enum(value: "end_at")
    STATUS @enum(value: "status.alias")
    CLIENT @enum(value: "client.last_name")
    AGENT @enum(value: ["agent.phone","agent.title"])
    PLACE @enum(value: "place.title")
    CREATED_AT @enum(value: "created_at")
    UPDATED_AT @enum(value: "updated_at")
}

extend type Mutation {
    createBooking(
        begin_at: DateTime @rules(apply: ["required", "date"])
        end_at: DateTime @rules(apply: ["required", "date", "after:begin_at"])
        status_id: Int @rules(apply: ["exists:statuses,id"])
        client_id: Int @rules(apply: ["exists:clients,id,deleted_at,NULL"])
        agent: setAgentMorphTo
        place_id: Int @rules(apply: ["required", "exists:places,id,deleted_at,NULL"])
        info: String @trim
    ): Booking @create

    updateBooking(
        id: ID!
        begin_at: DateTime @rules(apply: ["date"])
        end_at: DateTime @rules(apply: ["required_with:begin_at", "date", "after:begin_at"])
        status_id: Int @rules(apply: ["exists:statuses,id"])
        client_id: Int @rules(apply: ["exists:clients,id,deleted_at,NULL"])
        agent: setAgentMorphTo
        place_id: Int @rules(apply: ["exists:places,id,deleted_at,NULL"])
        info: String @trim
    ): Booking @update

    deleteBooking(
        id: ID!
    ): Booking @delete
}

input setAgentMorphTo {
    connect: AgentInput
}

input AgentInput {
    type: String!
    id: ID! @rules(apply: ["exists_morph:type,id,deleted_at,NULL"])
}
